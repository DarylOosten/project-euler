package daryl.projecteuler.problems

import daryl.projecteuler.utilities.Factoring

/**
 * Highly divisible triangular number
 * Problem 12
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1 =  1: 1
 * 2 =  3: 1,3
 * 3 =  6: 1,2,3,6
 * 4 = 10: 1,2,5,10
 * 5 = 15: 1,3,5,15
 * 6 = 21: 1,3,7,21
 * 7 = 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 * @see <a href="http://projecteuler.net/problem=12">Project Euler</a>
 * 
 * @author daryl
 */
object HighlyDivisibleTriangularNumber {

  def apply(divisors: Int): Int = {
    triangleFactors.filter(p => p._2 > divisors).head._1
  }

  val triangleFactors: Stream[(Int, Int)] = {
    Stream.from(1).map(n => triangleWithFactorsOf(n))
  }

  def triangleWithFactorsOf(number: Int): (Int, Int) = {
    val t = triangle(number)
    (t, Factoring(t))
  }

  def triangle(number: Int): Int = {
    number * (number + 1) / 2
  }
}